// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User{
  id String @id @default(cuid())
  name String
  address Address[]
  contact Int
  email String @unique
  password String
  role Role @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime  @updatedAt
  cart CartItem[]

}
enum Role {
  ADMIN
  CUSTOMER
}
model Address {
  id String @id @default(cuid())
  user User @relation(fields:[userId],references:[id])
  userId String 
  street String
  city String
  state String
  postalCode String
  country String
  isDefault Boolean @default(false)

}
model Product {
  id String @id @default(cuid())
  name String
  price Float
  description String?
  stock Int @default(0)
  image String[]
  category Category @relation(fields: [categoryId],references: [id])
  categoryId String @unique 
  cart CartItem[]
}
model Category {
  id String @id @default(cuid())
  name String @unique
  slug String @unique
  product Product[]
}
model CartItem{
  id String @id @default(cuid())
  user User @relation(fields: [userId],references: [id])
  userId String
  product Product @relation(fields: [productId],references: [id])
  productId String
  quantity Int @default(1)
}
model Order {
  id String @id @default(cuid())
  user User @relation(fields: [userId],references: [id])
  userId String
  items OrderItem[]
  total Float
  status OrderStatus @default(PENDING)
  address Address @relation(fields: [addressId],references: [id])
  addressId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
model OrderItem{
  id String @id @default(cuid())
  order Order @relation(fields: [orderId],references: [id],onDelete: Cascade)
  orderId String
  product Product 
}